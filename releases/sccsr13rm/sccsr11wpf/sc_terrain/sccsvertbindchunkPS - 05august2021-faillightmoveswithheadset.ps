
/////////////////////
////   GLOBALS
//////////////////////

Texture2D shaderTexture;

SamplerState textureSampler
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};

cbuffer LightBuffer
{
	float4 ambientColor;
	float4 diffuseColor;
	float3 lightDirection;
	float padding;
};

/*//////////////////////
////   TYPES
//////////////////////
struct PixelInputType
{
	float4 position : SV_POSITION;
	float4 color : COLOR0;
	float3 normal : NORMAL0;
	float2 tex : TEXCOORD0;
};*/


struct PixelInputType
{ 
    float4 position : SV_POSITION;
	float4 color : COLOR0;
	float3 normal : NORMAL0;
	int padding0 : PSIZE0;	
	float2 tex : TEXCOORD0;
	int padding1 : PSIZE1;	
	int padding2 : PSIZE2;	
	float4 instancePosition : POSITION1;
	float4 instanceRadRotFORWARD : POSITION2;
	float4 instanceRadRotRIGHT : POSITION3;
	float4 instanceRadRotUP : POSITION4;
	float4 colorsNFaces : POSITION5;
	float4 mapmatrix0 : POSITION6;
	float4 mapmatrix1 : POSITION7;
	float4 mapmatrix2 : POSITION8;
	float4 mapmatrix3 : POSITION9;
	/*int one : PSIZE3;	
	int oneTwo : PSIZE4;
	int two : PSIZE5;	
	int twoTwo : PSIZE6;	
	int three : PSIZE7;	
	int threeTwo : PSIZE8;	
	int four : PSIZE9;	
	int fourTwo : PSIZE10;*/
	int xindex : PSIZE11;	
	int yindex : PSIZE12;
};




//////////////////////
////   Pixel Shader
/////////////////////
float4 TexturePixelShader(PixelInputType input) : SV_TARGET
{
	float4 textureColor;
	float3 lightDir;
	float lightIntensity;
	float4 color;

	int screensizex = 19;//384; //192*2 //76
	int screensizey = 10;//216; //108*2 //40

	/*//float4 textureColor;
	float2 test = input.tex;
	// when using 250 inst_screen_x in the script sc_graphics_sec.cs then use 500 here.
	test = (test/ float2(screensizex,screensizey)); //192/108
	float2 testY = input.tex;
	// when using 250 inst_screen_x in the script sc_graphics_sec.cs then use 0.004 here.


	test.x = (test.x + ((1/(screensizex*0.5f)) * input.xindex));
	test.y = (test.y + ((1/(screensizey*0.5f)) * input.yindex));

	input.tex = test;*/



	//float4 textureColor;
	float2 test = input.tex;
	// when using 250 inst_screen_x in the script sc_graphics_sec.cs then use 500 here.
	test = (test/ float2(screensizex,screensizey));
	float2 testY = input.tex;
	// when using 250 inst_screen_x in the script sc_graphics_sec.cs then use 0.004 here.
	test.x = (test.x + (0.1 * input.xindex));
	test.y = (test.y + (0.1 * input.yindex));
	input.tex = test;





	// Sample the pixel color from the texture using the sampler at this texture coordinate location.
	textureColor = shaderTexture.Sample(textureSampler, input.tex);

	// Set the default output color to the ambient light value for all pixels.
	color = ambientColor;

	// Invert the light direction for calculations.
	lightDir = - lightDirection;

	// Calculate the amount of the light on this pixel.
	lightIntensity = saturate(dot(input.normal, lightDir));

	if(lightIntensity > 0.0f)
	{
		// Determine the final diffuse color based on the diffuse color and the amount of light intensity.
		color += (diffuseColor * lightIntensity); // * (input.color *0.015f)
	}

	float3 someextracolor = mul(input.color.xyz, lightIntensity);
	someextracolor = normalize(someextracolor);
	someextracolor = saturate(someextracolor);

	// Saturate the final light color.
	color = saturate(color); //+ (input.colorsNFaces * 0.1f)

	color.xyz += someextracolor.xyz * 0.75f;

	// Multiply the texture pixel and the final diffuse color to get the final pixel color result.
	// EX 2: for seeing only the lighting effect.
	color = color * textureColor;
	//color = textureColor;

	input.color = color*input.colorsNFaces;

	return input.color;//input.color;//input.colorsNFaces;//input.color;
}