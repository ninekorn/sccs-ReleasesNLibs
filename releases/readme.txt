MY WORKING PROGRAM IS THE SCCSR14SC for Winforms. I am still working on my wpf solution.
Demo Released - heightmaps color displacement Voxel Virtual Desktop

Hi everyone,

I released yesterday night/early this morning my unfinished Virtual Desktop screencapture for playing pc Video Games on a Voxel Heightmap (vertex height displacement based on color values) at the link below. There are multiple options when using my program. Currently Pinvoke isn't working as expected although i had made it work for some games like Path of Exile and Void Expanse where it's only the mouse click that is sent to the gaming window and by using PInvoke and not making my software transparent i was able to make both cursors invisible if using DWMSharedSurface screencapture from Mika's Sandbox. Currently, you can choose between 3 types of screencapture for your main monitor only: 1. SharpDX directx11.1 screencapture or WinRT.GraphicsCapture or Win32.DWMSharedSurface. All 3 of them on my hardware MSI 570RX 8gb video card and Ryzen 2600 and 16gb of ram, they all seem to be running fine with good fps. But SharpDX directx11.1 unfortunately isn't a viable option if only using 1 monitor since it's the whole desktop that is captured and not just a specific window. I will try and experiment on making a Windows Virtual Computer Desktop or a Virtual Monitor to have a chance to use shardDX directx11.1 screencapture outside of virtual reality as currently is it working in virtual reality on my other programs.

My program starts in windowed mode. In order to make it an overlay for your game, you have to select your game from ALT-TAB and then select my software by ALT-TAB and once my software is on top of your game (which it always will be with TopMost pinvoke or winforms TopMost=true option) you hide my software menu with the keyboard key F9 and use the numpad number 6 to make it fullscreen. If you don't see your games mouse cursor it means your game isn't successfully on the layer under my engine on your windows desktop. So you would have to again use Alt-Tab to select your game and it won't come on top of my engine and my engine would be the overlay. It isn't transparent but is marked as such so that mouse clicks go straight through everywhere that you click on my window.

Once you are set with my engine on top of your game, you can use the numpad key 0 to unlock the camera in my engine to move around. you can reduce the speed of movement with the numpad + or -. You can move with the arrow keys forward/back/left/right and also you can use the same keyboard keys W-A-S-D to move forward/back/left/right. You can use the keys Q and Z to move the camera up/down. You can use the keyboard keys R and F to rotate the camera on it's pitch X axis up and down. The numpad Enter key resets the camera in front of the virtual desktop. To save the position of the camera to specific angles, you press the numpad key 4 and then save it as saved positions/angles to the numpad keys 7 or 8 or 9. Once your camera positions are saved, you can first press the numpad key 5 and then press 7 or 8 or 9 to move the camera to those angles... Currently to view those saved positions you have to unlock the camera with numpad 0 otherwise the angle won't be good (fix coming soon). Also you can use the keyboard keys HOME and END in order to move the color displacement heightmaps to the maximum or minimum. In order to change the color displacement values slower you have to use the numpad keyboard keys 1 to increase the heightmap value and 3 to decrease the heightmap value.

This is a demo of the work i am doing for using my virtual desktop solution on pc video games without using a Virtual Reality Headset. The memory usage is very low considering i am using instanced voxel mesh with approx 100 to 150 megabytes. But since this is a per frame color displacement heightmap values sent to over 5 hundred thousand voxels, you can find the cpu and gpu usage at a higher level with an average of 10% to 15% cpu usage and 20% to 25% gpu usage, on my hardware mentioned above. It's far from being a AAA Ultra graphics cpu and gpu usage, but it certainly looks great when moving the camera around and seeing the tons of voxels displayed on the screen as displaced color values.

This is a demo version, and there are multiple things left to fix. Currently changing from the different screencapture options create a memory leak every time of between 0 to 25 megabytes. I thought i had fixed this in the past few days but it seems i have still some code to dispose of inside of the memory everytime that the screencapture method is changed. The memory leak should only affect my program while it runs so the more that you change screencapture method the more you lose ram and you have to quit my program and restart it to have a genuine first launch experience. In my future versions it will be possible to choose which screencapture method to use from the start.

Download Link (currently you have to download my entire repository which is quite humongous - i will create a specific release folder soon):
https://github.com/ninekorn/sccs/tree/main/releases/s..

As always, thank you for your support,
Steve Chass√©
